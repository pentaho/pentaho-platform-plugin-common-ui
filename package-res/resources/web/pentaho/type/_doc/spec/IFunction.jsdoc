/*!
 * Copyright 2010 - 2016 Pentaho Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `spec.IFunction` interface describes a function value in _object_ form.
 *
 * @name pentaho.type.spec.IFunction
 *
 * @interface
 * @extends pentaho.type.spec.ISimple
 */

/**
 * The underlying function value.
 *
 * Property [v]{@link pentaho.type.spec.IFunction#v} is an alias for this one.
 *
 * One and only one of `v` or `value` must be specified, non-{@link Nully}.
 *
 * The value can be given as either a native JavaScript {@link function} or a
 * string in the form of a function declaration
 * (as would be returned by its
 * [toString]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString}
 * method).
 *
 * When serialized as JSON, the result of calling its `toString()` method is used.
 *
 * **Attention**: Native functions are serialized as if they were a `null` value
 * (e.g. {@link String}, or resulting from {@link Function#bind}.
 *
 * Also, note that any functions that capture variables from their surrounding scopes
 * (other than the global scope) cannot be properly de-serialized back.
 * Only stateless functions can be properly serialized and de-serialized.
 *
 * @name value
 * @memberOf pentaho.type.spec.IFunction#
 * @type {?function|string}
 */

/**
 * An alias for [value]{@link pentaho.type.spec.IFunction#value}.
 *
 * @name v
 * @memberOf pentaho.type.spec.IFunction#
 * @type {?function|string}
 */
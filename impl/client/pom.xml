<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.pentaho</groupId>
    <artifactId>common-ui-impl</artifactId>
    <version>9.1.0.0-SNAPSHOT</version>
  </parent>

  <artifactId>common-ui-impl-client</artifactId>
  <version>9.1.0.0-SNAPSHOT</version>
  <name>Common UI client side</name>

  <description>This artifact is a temporary container for all client side code that either was produced by pentaho or
    that is a modified external dependency that is included in common-ui. The goal for the future is to have artifacts
    for each of the constituents (e.g. vizapi, prompting) of the current artifact.</description>

  <properties>
    <js.project.list>dojo-release,requirejs,jquery,jquery-i18n-properties,pentaho-cdf-js</js.project.list>
    <build.javascriptReportDirectory>target/js-reports</build.javascriptReportDirectory>

    <docjs.config.file>jsdoc-vizapi.json</docjs.config.file>
    <docjs.config.github.branch>master</docjs.config.github.branch>
    <docjs.config.template.directory>${project.basedir}/src/doc/javascript/template</docjs.config.template.directory>

    <js.build.optimizer>uglify2</js.build.optimizer>
    <requirejs.config.files.pattern>**/*-require-js-cfg.js</requirejs.config.files.pattern>
    <webjars.target.directory>${build.dependenciesDirectory}/META-INF/resources/webjars</webjars.target.directory>

    <!-- The parent POM declarations of these properties
         use `project.rootdir` which does not seem to exist...
    <frontend-maven-plugin.installDirectory>${project.basedir}/target</frontend-maven-plugin.installDirectory>
    <frontend-maven-plugin.workingDirectory>${project.basedir}</frontend-maven-plugin.workingDirectory>
     -->
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.dojotoolkit.dojo</groupId>
      <artifactId>dojo-release</artifactId>
      <type>zip</type>
      <classifier>src</classifier>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>jquery</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.bower</groupId>
      <artifactId>jquery-i18n-properties</artifactId>
    </dependency>
    <dependency>
      <groupId>pentaho</groupId>
      <artifactId>pentaho-cdf-js</artifactId>
      <type>zip</type>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>requirejs</artifactId>
    </dependency>
  </dependencies>

  <build>
    <testResources>
      <testResource>
        <targetPath>${project.build.directory}</targetPath>
        <filtering>true</filtering>
        <directory>${build.javascriptTestConfigDirectory}</directory>
        <includes>
          <include>*</include>
        </includes>
      </testResource>
    </testResources>

    <plugins>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <!-- Need to copy common-ui-require-js-cfg.js to dependencies so it
                 gets caught up by the `javascript-requirecfg_aggregate` parent pom execution. -->
            <id>copy-own-config-to-dependencies</id>
            <phase>${javascript_unpack-dependencies-phase}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${build.dependenciesDirectory}/common-ui</outputDirectory>
              <resources>
                <resource>
                  <filtering>true</filtering>
                  <directory>${basedir}/src/main/resources-filtered/web</directory>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>copy-requireCfg-bundles</id>
            <phase>${javascript_unpack-dependencies-phase}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/src/main/config/resources</directory>
                  <includes>
                    <include>requireCfg.bundles.js</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>bundle-common-ui-platform-plugin</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <descriptors>
                <descriptor>src/main/assembly/dependencies-js-assembly.xml</descriptor>
              </descriptors>
              <outputDirectory>${project.build.outputDirectory}</outputDirectory>
              <appendAssemblyId>false</appendAssemblyId>
              <finalName>web</finalName>
              <attach>false</attach>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <!-- r.js 's fileExclusionRegExp option does not support paths with directories. -->
          <excludes>
            <exclude>web/compressed/pentaho/visual/config.js</exclude>
          </excludes>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <!-- Need to "override" the `javascript-test` profile,
      for a couple of reasons... -->
  <profiles>
    <profile>
      <id>javascript-test-override</id>
      <activation>
        <property>
          <name>!maven.test.skip</name>
        </property>
        <file>
          <!-- Using ${javascriptTestSourceDirectory}, like in
               the root pom, does not work.
               The property seems to not have a value when this is
               evaluated... -->
          <exists>${basedir}/src/test/javascript</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <!-- Change the karmaConfPath. -->
          <plugin>
            <groupId>com.github.eirslett</groupId>
            <artifactId>frontend-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>javascript-test_karma</id>
                <configuration>
                  <karmaConfPath>${project.build.directory}/${karma.file.config}</karmaConfPath>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <!-- Not using the parent-pom defined `test-javascript` directory to run JS unit-tests.
                   So disable the execution to not waste time copying files. -->
              <execution>
                <id>javascript-test_copy-resources</id>
                <phase>none</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>

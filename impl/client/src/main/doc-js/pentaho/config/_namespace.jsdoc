/*!
 * Copyright 2010 - 2018 Hitachi Vantara. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `config` namespace contains the types of the **Pentaho Configuration API**.
 *
 * ## Overview
 *
 * The Configuration API provides a means for modules to be configured by third-parties.
 *
 * Modules are known by their _string_ identifier.
 *
 * **Configurations** are JavaScript objects that conform to the
 * [IRuleSet]{@link pentaho.config.spec.IRuleSet} interface â€” essentially, a set of configuration rules,
 * [IRule]{@link pentaho.config.spec.IRule}.
 * Typically,
 * configurations are provided as the value of an AMD/RequireJS module.
 * This module needs to be advertised to the configuration system by registering it
 * with `pentaho/modules`, as an instance of type `pentaho/config/spec/IRuleSet`:
 *
 * ```js
 * require.config({
 *   config: {
 *     "pentaho/modules": {
 *       "my/rules": {type: "pentaho/config/spec/IRuleSet"}
 *     }
 *   }
 * });
 * ```
 *
 * **Configuration rules** specify the module identifier and the values of any
 * [platform environmental variables]{@link pentaho.environment.IEnvironment}
 * to which they apply,
 * as well as the actual configuration properties that should be applied.
 *
 * Configurations can be obtained through the {@link pentaho.config.IService} interface,
 * the main instance of which is {@link pentaho.config.service}.
 * Example:
 *
 * ```js
 * define([
 *   "pentaho/config/service"
 * ], function(configService) {
 *
 *   // Get the configuration for the module `my/IFoo`:
 *   configService.selectAsync("my/IFoo").then(function(config) {
 *     if(config !== null) {
 *       // ...
 *     }
 *   });
 * });
 * ```
 *
 * More commonly, a module requests its own configuration
 * using the [pentaho/module!]{@link pentaho.module.metaOf} AMD/RequireJS loader plugin.
 *
 * For example, the `my/Foo` module could obtain its own configuration in the following way:
 * ```js
 * define(["pentaho/module!_"], function(module) {
 *
 *   if(module.config !== null) {
 *     // ...
 *   }
 * });
 * ```
 *
 * @name pentaho.config
 * @namespace
 */

// TODO: The configuration system should allow for _configuration inheritance_.


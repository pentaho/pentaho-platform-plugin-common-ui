/*!
 * Copyright 2010 - 2022 Hitachi Vantara. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `config.IService` interface describes a service
 * that manages configurations of modules, and of module annotations, for a given environment.
 *
 * It is up to the implementation how the environment it uses to select rules
 * is obtained.
 *
 * The [add]{@link pentaho.config.IService#add} method
 * is used to register a [config.spec.IRuleSet]{@link pentaho.config.spec.IRuleSet}
 * with the service.
 *
 * The configuration of a module or module annotation can be obtained by calling the
 * [selectAsync]{@link pentaho.config.IService#selectAsync} method.
 *
 * Rules that apply to a given module and given environment variables are sorted by specificity
 * and then their [specifications]{@link pentaho.config.spec.IRule#apply} are merged.
 * For more information on the specificity of rules,
 * see [config.spec.IRuleSet]{@link pentaho.config.spec.IRuleSet}.
 *
 * Suppose that the following rule set is defined in the system:
 *
 * ```json
 * {
 *   "rules": [
 *     // Disable a still experimental component.
 *     {
 *       "select": {
 *         "module": "my.foo.component"
 *       },
 *       "apply": {
 *         "enabled": false
 *       }
 *     },
 *
 *     // Enable it, only for the dev user, "john", and the "super-app" application.
 *     {
 *       "select": {
 *         "module":      "my.foo.component",
 *         "user":        "john",
 *         "application": "super-app"
 *       },
 *       "apply": {
 *         "enabled": true
 *       }
 *     }
 *   ]
 * }
 * ```
 *
 * Additionally,
 * assume that an implementation of a configuration service exists,
 * setup for the environment:
 *
 * ```json
 * {
 *   "user":        "john",
 *   "application": "not-so-super-app"
 * }
 * ```
 *
 * We could use it like in the following example:
 *
 * ```js
 * configService.selectAsync("my.foo.component").then(function(mergedConfigSpec) {
 *
 *   // Results in a configuration specification like:
 *   // {
 *   //   enabled: false
 *   // }
 * });
 * ```
 *
 * @name pentaho.config.IService
 * @interface
 *
 * @see pentaho.config.service
 * @see pentaho.config.spec.IRuleSet
 */

/**
 * Selects, asynchronously, the configuration of a module, or module annotation,
 * given their identifiers.
 *
 * If this is a type module and `keyArgs.inherit` is `true`,
 * then the resulting configuration is obtained by merging the configurations obtained
 * from ancestor type modules and the local configuration.
 * The local configuration overrides that inherited from ancestor modules.
 * Configurations are merged using {@link pentaho.util.spec.merge}.
 *
 * @name selectAsync
 * @memberOf pentaho.config.IService#
 * @param {string} moduleId - The identifier of the module.
 * @param {?string} [annotationId] - The identifier of the module annotation.
 * @param {object} [keyArgs] - The keyword arguments object.
 * @param {boolean} [keyArgs.inherit=false] - Indicates that if this is a type module,
 * configurations inherited from ancestor modules should be included.
 * @return {Promise.<?object>} A promise for the configuration, if any, or a promise for `null`, otherwise.
 */

/**
 * Gets the identifiers of specified annotations of a module, if any, given its identifier.
 *
 * @name getAnnotationsIds
 * @memberOf pentaho.config.IService#
 * @param {string} moduleId - The identifier of the module.
 * @return {?Array.<string>} An array of annotation identifiers, if any; `null`, otherwise.
 */

/**
 * Gets a value that indicates if a module annotation specification exists.
 *
 * @name hasAnnotation
 * @memberOf pentaho.config.IService#
 * @param {string} moduleId - The identifier of the module.
 * @param {string} annotationId - The identifier of the module annotation.
 * @return {boolean} `true` if a module annotation specification exists; `false`, otherwise.
 */

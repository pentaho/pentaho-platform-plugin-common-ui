/*!
 * Copyright 2010 - 2018 Hitachi Vantara. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `IObserver` interface represents an [action]{@link pentaho.type.action.Base} _observer_
 * and allows specifying event listener functions for each of an _action's phases_.
 *
 * @name pentaho.type.action.IObserver
 *
 * @interface
 * @extends pentaho.lang.IEventObserver
 * @see pentaho.type.action.Base
 */

/**
 * The listener for the action's *initialize* phase.
 *
 * The _initialize_ phase allows modification of an action's properties
 * as well as cancellation (or failure) of the action.
 * After this phase, the action's general properties are _frozen_,
 * and only its state-related properties may change.
 *
 * @name init
 * @memberOf pentaho.type.action.IObserver#
 * @type {?pentaho.lang.EventListener.<pentaho.type.action.Base>}
 */

/**
 * The listener for the action's *will* phase.
 *
 * The _will_ phase, which follows a successful _initialize_ phase,
 * allows cancellation (or failure) of the action.
 *
 * @name will
 * @memberOf pentaho.type.action.IObserver#
 * @type {?pentaho.lang.EventListener.<pentaho.type.action.Base>}
 */

/**
 * The asynchronous listener for the action's *do* phase.
 *
 * The _do_ phase, which follows a successful _will_ phase,
 * allows actual _execution_ of the action.
 * The action cannot be canceled from within this phase, but it can, however, fail.
 *
 * When the action is [asynchronous]{@link pentaho.type.action.BaseType#isSync},
 * the listener function _may_ return a promise that is resolved upon
 * the listener's completion. If the promise is rejected,
 * the action is rejected with the rejection reason.
 * However, if the promise is fulfilled, its value is always *ignored*.
 *
 * @name do
 * @memberOf pentaho.type.action.IObserver#
 * @type {?pentaho.lang.EventListenerAsync.<pentaho.type.action.Base>}
 */

/**
 * The listener for the action's *finally* phase.
 *
 * The _finally_ phase, follows either a _do_ phase, or rejected _init_ and _will_ phases.
 *
 * @name finally
 * @memberOf pentaho.type.action.IObserver#
 * @type {?pentaho.lang.EventListener.<pentaho.type.action.Base>}
 */

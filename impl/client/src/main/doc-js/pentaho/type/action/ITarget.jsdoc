/*!
 * Copyright 2010 - 2017 Pentaho Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `ITarget` interface represents the entity which is acted upon
 * or the place where the [action]{@link pentaho.type.action.Base} takes place.
 *
 * In turn, commonly, an action target will emit events for each of the action's phases,
 * events in which it is its _source_.
 *
 * @name pentaho.type.action.ITarget
 *
 * @interface
 *
 * @see pentaho.type.action.Base
 */

/**
 * Executes a given action in this target and does not wait for its outcome.
 *
 * This method can be given [synchronous or asynchronous]{@link pentaho.type.action.Base.Type#isSync} actions.
 * However, in the latter case, this method is only suitable for _fire-and-forget_ scenarios,
 * where it is not needed to know the outcome of the asynchronous action.
 *
 * It is up to the action target implementation to
 * call the given action's [execute]{@link pentaho.type.action.Base#execute} method
 * with itself as target and, optionally, with an appropriate action executor.
 *
 * @name act
 * @memberOf pentaho.type.action.ITarget#
 * @method
 * @param {!pentaho.type.action.Base|!pentaho.type.action.spec.IBase} action - The action or
 * action specification to execute.
 * @return {!pentaho.type.action.Base} The given action.
 *
 * @see pentaho.type.action.ITarget#actAsync
 */

/**
 * Executes a given action in this target and waits for its outcome.
 *
 * This method can be given either [synchronous or asynchronous]{@link pentaho.type.action.Base.Type#isSync}
 * actions which allows for uniform treatment regardless of the synchronous nature of the action.
 * This method can also be used when the outcome of an asynchronous action must be known.
 *
 * It is up to the action target implementation to
 * call the given action's [executeAsync]{@link pentaho.type.action.Base#executeAsync} method
 * with itself as target and, optionally, with an appropriate action executor.
 *
 * @name actAsync
 * @memberOf pentaho.type.action.ITarget#
 * @method
 * @param {!pentaho.type.action.Base|!pentaho.type.action.spec.IBase} action - The action or
 * action specification to execute.
 * @return {!Promise} A promise that is fulfilled with the action's
 * [result]{@link pentaho.type.action.Base#result} or rejected with the action's
 * [error]{@link pentaho.type.action.Base#error}.
 *
 * @see pentaho.type.action.ITarget#act
 */

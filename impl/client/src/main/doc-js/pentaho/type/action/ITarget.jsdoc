/*!
 * Copyright 2010 - 2018 Hitachi Vantara. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `ITarget` interface represents the entity which is acted upon
 * or the place where the [action]{@link pentaho.type.action.Base} takes place.
 *
 * A target controls the execution of actions in it.
 * Depending on the target and type of action,
 * events may be emitted for each of the action execution's phases.
 * Consult the documentation of the target type to know how it handles
 * the execution of a given action.
 *
 * It is advisable that when a target does not know a specific action type
 * that it executes it generically, by delegating all of its phases to events.
 *
 * @name pentaho.type.action.ITarget
 *
 * @interface
 *
 * @see pentaho.type.action.Base
 */

/**
 * Executes or starts execution of a given action in this target and returns the
 * corresponding action execution instance.
 *
 * This method can be given [synchronous or asynchronous]{@link pentaho.type.action.BaseType#isSync} actions.
 * To wait for the result of an asynchronous action,
 * obtain the [promise]{@link pentaho.type.action.Execution#promise} property
 * of the returned action execution instance.
 *
 * @name act
 * @memberOf pentaho.type.action.ITarget#
 * @method
 * @param {!pentaho.type.action.Base|!pentaho.type.action.spec.IBase} action - The action or
 * action specification to execute.
 * @return {!pentaho.type.action.Execution} The resulting action execution.
 */

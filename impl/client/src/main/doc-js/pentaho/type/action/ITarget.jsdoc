/*!
 * Copyright 2010 - 2017 Pentaho Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `ITarget` interface represents the entity _where_ an
 * [action]{@link pentaho.type.action.Base} takes place,
 * or the pacient/object of action.
 *
 * @name pentaho.type.action.ITarget
 *
 * @interface
 *
 * @see pentaho.type.action.Base
 */

/**
 * Executes a given action with this object as its target and controller and does not wait for its outcome.
 *
 * This method can be given [synchronous]{@link pentaho.type.action.Base.Type#isSync} or asynchronous actions.
 * However, in the latter case, this method is only suitable for _fire-and-forget_ scenarios,
 * where it is not needed to know the outcome of the asynchronous action.
 *
 * @name act
 * @memberOf pentaho.type.action.ITarget#
 * @method
 * @param {!pentaho.type.action.Base} action - The action to execute.
 * @return {!pentaho.type.action.Base} The given action.
 *
 * @see pentaho.type.action.ITarget#actAsync
 */

/**
 * Executes a given action with this object as its target and controller and waits for its outcome.
 *
 * This method can be given [synchronous]{@link pentaho.type.action.Base.Type#isSync} or asynchronous actions,
 * and can be used when uniformity in treatment is desired and it is needed to know the outcome of the
 * asynchronous action.
 *
 * @name actAsync
 * @memberOf pentaho.type.action.ITarget#
 * @method
 * @param {!pentaho.type.action.Base} action - The action to execute.
 * @return {!Promise} A promise that is fulfilled with the action's
 * [result]{@link pentaho.type.action.Base#result} or rejected with the action's
 * [error]{@link pentaho.type.action.Base#error}.
 *
 * @see pentaho.type.action.ITarget#act
 */

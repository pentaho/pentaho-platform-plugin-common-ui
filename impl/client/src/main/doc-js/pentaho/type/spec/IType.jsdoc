/*!
 * Copyright 2010 - 2018 Hitachi Vantara. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `spec.IType` interface represents the specification of a type.
 *
 * @name pentaho.type.spec.IType
 * @interface
 */

/**
 * A reference to the type's base type, if any.
 *
 * When the specification is used in the context of a property, it defaults to `"property"`.
 * Otherwise, when absent or `undefined`, it defaults to `"complex"`.
 *
 * See a subtype's documentation for more information on default values.
 *
 * @name base
 * @memberOf pentaho.type.spec.IType#
 * @type {?pentaho.type.spec.TypeReference}
 */

/**
 * Indicates if the type is abstract.
 *
 * An abstract type cannot be used directly to create an instance
 * and, as such, it is not usually exposed to users in a user interface.
 *
 * When not a boolean,
 * it is taken instead to be the result of passing it to the `Boolean` function.
 *
 * @name isAbstract
 * @memberOf pentaho.type.spec.IType#
 * @type {?boolean | any}
 * @default false
 * @see pentaho.type.spec.IType#isBrowsable
 */

/**
 * The identifier of the type's AMD module, a _temporary identifier_, or `null`.
 *
 * An empty string or `undefined` value is interpreted as `null`.
 *
 * For serialization purposes,
 * a **temporary identifier** can be assigned to an anonymous type.
 * An identifier is _temporary_ if it starts with
 * [idTemporaryPrefix]{@link pentaho.type.SpecificationContext.idTemporaryPrefix}.
 *
 * Temporary identifiers are ignored upon type construction.
 *
 * When unspecified or `null`, it defaults to [sourceId]{@link pentaho.type.spec.IType#sourceId}.
 *
 * @name id
 * @memberOf pentaho.type.spec.IType#
 * @type {?string}
 *
 * @see pentaho.type.SpecificationContext.isIdTemporary
 */

/**
 * The alias for the identifier of this type.
 *
 * The alias of a type can only be specified when extending the ancestor type.
 *
 * This attribute is not inherited.
 *
 * When unspecified, defaults to `null`.
 *
 * @name alias
 * @memberOf pentaho.type.spec.IType#
 * @type {?nonEmptyString}
 * @readonly
 *
 * @see pentaho.type.spec.IType#id
 */

/**
 * The identifier of the value type's _source_ AMD module, or `null`.
 *
 * An empty string or `undefined` value is interpreted as `null`.
 *
 * When unspecified or `null`, it defaults to [id]{@link pentaho.type.spec.IType#id}.
 *
 * @name sourceId
 * @memberOf pentaho.type.spec.IType#
 * @type {?string}
 *
 * @see pentaho.type.SpecificationContext.isIdTemporary
 */

/**
 * The label of the type.
 *
 * When non-{@link Nully} and not a string,
 * it is taken instead to be the result of calling its `toString` method.
 *
 * When an empty string or {@link Nully},
 * the label is inherited from the base type.
 *
 * The _initial value_ of this attribute, on the top-root type, is `"instance"`.
 *
 * @name label
 * @memberOf pentaho.type.spec.IType#
 * @type {?nonEmptyString | any}
 */

/**
 * The `application` property of the type.
 *
 * The application property serves as a bag of properties specific to the _container application_,
 * that can be modified via the [Configuration Service]{@link pentaho.config.Service}.
 *
 * {@link Nully} values will be ignored by the application property.
 *
 * @name application
 * @memberOf pentaho.type.spec.IType#
 * @type object
 * @see pentaho.type.Type#application
 */

/**
 * The description of the type.
 *
 * When non-{@link Nully} and not a string,
 * it is taken instead to be the result of calling its `toString` method.
 *
 * When `undefined`,
 * the description is inherited from the base type.
 *
 * When an empty string or `null`,
 * the description is forced to be `null`,
 * ignoring any inherited value.
 *
 * @name description
 * @memberOf pentaho.type.spec.IType#
 * @type {?nonEmptyString | any}
 */

/**
 * The category associated with the type.
 *
 * The category is used primarily to group similar types (or instances of) in a user interface.
 *
 * When non-{@link Nully} and not a string,
 * it is taken instead to be the result of calling its `toString` method.
 *
 * When `undefined`,
 * the category is inherited from the base type.
 *
 * When an empty string or `null`,
 * the category is forced to be `null`,
 * ignoring any inherited value.
 *
 * @name category
 * @memberOf pentaho.type.spec.IType#
 * @type {?nonEmptyString | any}
 * @see pentaho.type.spec.IType#isBrowsable
 * @see pentaho.type.spec.IType#ordinal
 */

/**
 * An URL pointing to documentation associated with the type.
 *
 * When non-{@link Nully} and not a string,
 * it is taken instead to be the result of calling its `toString` method.
 *
 * When `undefined`,
 * the help url is inherited from the base type.
 *
 * When an empty string or `null`,
 * the help url is forced to be `null`,
 * ignoring any inherited value.
 *
 * @name helpUrl
 * @memberOf pentaho.type.spec.IType#
 * @type {?nonEmptyString | any}
 */

/**
 * Indicates if the type should be exposed to users in a user interface.
 *
 * When non-{@link Nully} and not a boolean,
 * it is taken instead to be the result of passing it to the `Boolean` function.
 *
 * When {@link Nully},
 * the attribute value is inherited from the base type, if any.
 * The root value is `true`.
 *
 * @name isBrowsable
 * @memberOf pentaho.type.spec.IType#
 * @type {?boolean | any}
 */

/**
 * Indicates if the type should be exposed only to advanced users in a user interface.
 *
 * When non-{@link Nully} and not a boolean,
 * it is taken instead to be the result of passing it to the `Boolean` function.
 *
 * When {@link Nully},
 * the attribute value is inherited from the base type, if any.
 * The root value is `false`.
 *
 * @name isAdvanced
 * @memberOf pentaho.type.spec.IType#
 * @type {?boolean | any}
 */

/**
 * The CSS class associated with the type.
 *
 * This attribute is typically used to associate an icon with a type.
 *
 * When `null` or an empty string,
 * the attribute value is set to `null`.
 *
 * When unspecified, or `undefined`,
 * the attribute value defaults to the type's `id`,
 * in _snake-case_, if it has one; or, `null`, if not.
 *
 * @name styleClass
 * @memberOf pentaho.type.spec.IType#
 * @type {?nonEmptyString | any}
 */

/**
 * The ordinal associated with the type.
 *
 * The ordinal is used to disambiguate the order with which a type (or an instance of it) is shown in a user interface.
 *
 * When {@link Nully},
 * the ordinal is inherited from the base type, if any.
 * The root value is `0`.
 *
 * @name ordinal
 * @memberOf pentaho.type.spec.IType#
 * @type {?number | any}
 *
 * @see pentaho.type.spec.IType#isBrowsable
 * @see pentaho.type.spec.IType#category
 */

/**
 * The default view for instances of the type.
 *
 * When a string,
 * it is the identifier of the view's AMD module.
 * If the identifier is relative,
 * it is relative to [sourceId]{@link pentaho.type.spec.IType#sourceId}.
 *
 * When `undefined`,
 * the view is inherited from the base type, if any.
 * The root view is `null`.
 *
 * When _falsy_ (like if `null` or an empty string),
 * the value is forced to be `null`,
 * ignoring any inherited value.
 *
 * When a function,
 * it is the class or factory of the view.
 *
 * @name defaultView
 * @memberOf pentaho.type.spec.IType#
 * @type {?string | function}
 */

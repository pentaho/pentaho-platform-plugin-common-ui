/*!
 * Copyright 2010 - 2016 Pentaho Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `spec.IValueTypeProto` interface represents the specification of a value type.
 *
 * @name pentaho.type.spec.IValueTypeProto
 * @interface
 * @extends pentaho.type.spec.ITypeProto
 */

/**
 * The extensible/configurable members of the prototype of value instance classes.
 *
 * @name instance
 * @memberOf pentaho.type.spec.IValueTypeProto#
 * @type {pentaho.type.spec.IValueProto}
 *
 * @see pentaho.type.spec.IValueProto#type
 */

/**
 * Indicates if the type is an accidental type.
 *
 * A type that extends an accidental type is necessarily an accidental type, and so any value is ignored.
 * Otherwise, if the type extends an essential type and when `true`, defines an accidental type.
 *
 * @name isAccident
 * @memberOf pentaho.type.spec.IValueTypeProto#
 * @type {boolean}
 *
 * @see pentaho.type.Type#isAccident
 */

/**
 * Determines if a value of the type is **valid**.
 *
 * If you override this method,
 * be sure to call the base implementation,
 * and return any errors it reports.
 *
 * @name validateInstance
 * @memberOf pentaho.type.spec.IValueTypeProto#
 * @method
 *
 * @param {!pentaho.type.Value} value - The value to validate.
 *
 * @return {?Array.<!pentaho.type.ValidationError>} A non-empty array of errors or `null`.
 *
 * @see pentaho.type.Value.Type#validateInstance
 */

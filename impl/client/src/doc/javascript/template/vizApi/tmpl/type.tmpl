<?js
  var data = obj;
  var self = this;
  var mdnJsTypes = {
    "array": "Array",
    "boolean": "Boolean",
    "date": "Date",
    "error": "Error",
    "typeerror": "TypeError",
    "function": "Function",
    "infinity": "Infinity",
    "json": "JSON",
    "nan": "NaN",
    "null": "null",
    "number": "Number",
    "object": "Object",
    "string": "String",
    "promise": "Promise",
    "undefined": "undefined"};
  var mdnJsTypeBaseURL = "http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/";
  var backboneTypeBaseURL = "http://backbonejs.org/#";
  var jQueryTypes = {
    "jquery": "jQuery",
    "selector": "Selector"
  }
  var jQueryTypeBaseURL = "http://api.jquery.com/Types/#";

  var modifiers = "[?!]?";
  var left_p = "\\(?";
  var right_p = "\\)?";
  var remainder = "$|(?:[|,]\\s*)(.+)";
  var complexProps = "[<(?!\\w|,. )>]+";
  var BACKBONE_TYPE_REGX = /backbone\.([a-z]+)/i;

  // regx: /([?!]?)([\w.*]+)(?:())?/
  var SIMPLE_TYPE_REGX = new RegExp("(" + modifiers + ")([\\w.*]+)(?:\\(\\))?");

  // regx: /^(?:([?!]?)([\w.]+))\.<([<(?!\w|,. )>]+)>/
  var COMPLEX_TYPE_REGX = new RegExp("^(?:(" + modifiers + ")([\\w.]+))\\.<(" + complexProps + ")>");
  var TYPE_MODIFIER = 1;
  var TYPE_NAME = 2;
  var COMPLEX_TYPE_PROPS = 3;

  // Used in
  // regx: /(\(?(?:[\w|.*!?]+)\)?(?:\.<(?:[<(?!\w|,. )>]+)>)?)(?:$|(?:[|,]\s*)(.+))/
  var C_PROPS_RECURSIVE_REGX = new RegExp(
    "(" + left_p + "(?:[\\w|.*!?]+)" + right_p +
    "(?:\\.<(?:" + complexProps + ")>)?)" +
    "(?:" + remainder + ")"
  );
  var C_PROPS_RECURSIVE_FIRST = 1;
  var C_PROPS_RECURSIVE_REMAINDER = 2;

  // regx: /\(((?:.|\|)+)\)/
  var MULTIPLE_OR_TYPE_REGX = new RegExp("\\(((?:.|\\|)+)\\)");
  var MULTIPLE_OR_TYPES = 1;

  // -------

  /**
   * Parse the properties that are nested inside a complex type declaration
   * and build each nested type documentation link.
   *
   * @param {String} complexTypeProps - The complex type nested properties.
   *
   * @return {String} the html with links for the type declaration.
   */
  function parseComplexTypeProps(complexTypeProps) {
    var result = "";
    if(!complexTypeProps) return result;

    var isFinished = false;
    var recursiveMatch;
    while(!isFinished && (recursiveMatch = C_PROPS_RECURSIVE_REGX.exec(complexTypeProps)) != null) {
      var html = "";
      var firstType = recursiveMatch[C_PROPS_RECURSIVE_FIRST];
      complexTypeProps = recursiveMatch[C_PROPS_RECURSIVE_REMAINDER];

      var multipleOrTypes = MULTIPLE_OR_TYPE_REGX.exec(firstType);
      if (multipleOrTypes != null) {
        var html = "";
        var multipleArray = multipleOrTypes[MULTIPLE_OR_TYPES].split("|");
        var dataSize = multipleArray.length;

        multipleArray.forEach(function(name, index) {
          html += typeBuilder(name, index, dataSize);
        });

        result += "(" + html + ")";
      } else {
        result += typeBuilder(firstType);
      }

      isFinished = complexTypeProps == null;
      if(!isFinished) result += ", ";
    }

    return result;
  }

  /**
   * Build a type documentation link by checking if it is a simple or complex type declaration
   * and for the later, try to build recursively other type declarations nested inside.
   * @example Simple Type:
   * `Boolean -> `<code><a href="link/to/Boolean">Boolean</a></code>`
   *
   * @example Complex Type:
   * `Object.&lt;Date, String&gt;` -> `<code>
   *                                     <a href="link/to/Object">Object</a>.&lt;
   *                                     <code><a href="link/to/Date">Date</a></code>,
   *                                     <code><a href="link/to/String">String</a></code>&gt;
   *                                   </code>`
   *
   * @example Complex Nested:
   * `Object.&lt;Class.&lt;String&gt;&gt;` -> `<code>
   *                                             <a href="link/to/Object">Object</a>.&lt;
   *                                             <code>
   *                                               <a href="link/to/Class">Class</a>.&lt;
   *                                               <code><a href="link/to/String">String</a></code>&gt;
   *                                             </code>&gt;
   *                                           </code>`
   *
   * @param {String} name       - The type name.
   * @param {String} [index]    - The type position in the data array
   * @param {String} [dataSize] - The data array size.
   *
   * @return {String} the html with links for the type declaration.
   */
  function typeBuilder(name, index, dataSize) {
    // check if it is an array type
    var jsType = name;
    var complexType = COMPLEX_TYPE_REGX.exec(name);

    var complexTypeProps = null;
    var prefix;
    if (complexType !== null) {
      prefix = complexType[TYPE_MODIFIER];
      jsType = complexType[TYPE_NAME];
      complexTypeProps = complexType[COMPLEX_TYPE_PROPS];
    } else {
      var simpleType = SIMPLE_TYPE_REGX.exec(name);
      prefix = simpleType[TYPE_MODIFIER];
      jsType = simpleType[TYPE_NAME];
    }

    var separator = index != null && index < dataSize - 1 ? " | " : "";
    return buildLink(prefix, jsType, complexTypeProps) + separator;
  }

  function buildLink(prefix, jsType, complexTypeProps) {
    var typeLinkInfo = getLinkInfo(jsType);

    var safeHtml   = self.htmlsafe(prefix + typeLinkInfo.jsType);
    var jsTypeLink = self.linkto(typeLinkInfo.link, safeHtml);

    if (complexTypeProps != null) {
      return "<code>" + jsTypeLink + ".&lt;" + parseComplexTypeProps(complexTypeProps) + "&gt;</code>";
    } else {
      return "<code>" + jsTypeLink + "</code>";
    }
  }

  /**
   * Gets the link for a single type.
   * The type might be changed inside so we return it was well
   *
   * @param {String} jsType - The type name.
   *
   * @return {{String, String}} the type name and the documentation link.
   */
  function getLinkInfo(jsType) {
    var jsTypeLower = jsType.toLowerCase();

    var isMdnJsType = typeof mdnJsTypes[jsTypeLower] !== "undefined";
    var isJQueryType = typeof jQueryTypes[jsTypeLower] !== "undefined";
    var isBackboneType = BACKBONE_TYPE_REGX.exec(jsTypeLower) !== null;

    var link;
    if (isMdnJsType) {
      jsType = mdnJsTypes[jsTypeLower];
      link   = mdnJsTypeBaseURL + jsType;

    } else if (isBackboneType) {
      link = backboneTypeBaseURL + jsType.split(".")[1];

    } else if (isJQueryType) {
      jsType = jQueryTypes[jsTypeLower];
      link   = jQueryTypeBaseURL + jsType;

    } else { // CTools or unknown type, output its value
      link = jsType;
    }

    return {
      jsType: jsType,
      link: link
    }
  }

  if(data) {
    var dataSize = data.length;
    data.forEach(function(name, index) {
      ?><?js= typeBuilder(name, index, dataSize) ?><?js
    });
  }

?>
